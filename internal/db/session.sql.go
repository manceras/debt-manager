// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: session.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createRefreshToken = `-- name: CreateRefreshToken :one
INSERT INTO app.refresh_tokens (session_id, token_hash, expires_at, parent_id)
VALUES ($1, $2, $3, $4)
RETURNING id, session_id, created_at, expires_at
`

type CreateRefreshTokenParams struct {
	SessionID pgtype.UUID
	TokenHash []byte
	ExpiresAt pgtype.Timestamptz
	ParentID  pgtype.UUID
}

type CreateRefreshTokenRow struct {
	ID        pgtype.UUID
	SessionID pgtype.UUID
	CreatedAt pgtype.Timestamptz
	ExpiresAt pgtype.Timestamptz
}

func (q *Queries) CreateRefreshToken(ctx context.Context, arg CreateRefreshTokenParams) (CreateRefreshTokenRow, error) {
	row := q.db.QueryRow(ctx, createRefreshToken,
		arg.SessionID,
		arg.TokenHash,
		arg.ExpiresAt,
		arg.ParentID,
	)
	var i CreateRefreshTokenRow
	err := row.Scan(
		&i.ID,
		&i.SessionID,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const createSession = `-- name: CreateSession :one
INSERT INTO app.sessions (user_id, expires_at, user_agent, ip) VALUES ($1, $2, $3, $4) RETURNING id, user_id, created_at, expires_at, revoked_at, user_agent, ip
`

type CreateSessionParams struct {
	UserID    pgtype.UUID
	ExpiresAt pgtype.Timestamptz
	UserAgent pgtype.Text
	Ip        pgtype.Text
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (AppSession, error) {
	row := q.db.QueryRow(ctx, createSession,
		arg.UserID,
		arg.ExpiresAt,
		arg.UserAgent,
		arg.Ip,
	)
	var i AppSession
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreatedAt,
		&i.ExpiresAt,
		&i.RevokedAt,
		&i.UserAgent,
		&i.Ip,
	)
	return i, err
}

const getSessionByID = `-- name: GetSessionByID :one
SELECT id, user_id, created_at, expires_at, revoked_at, user_agent, ip FROM app.sessions WHERE id = $1
`

func (q *Queries) GetSessionByID(ctx context.Context, id pgtype.UUID) (AppSession, error) {
	row := q.db.QueryRow(ctx, getSessionByID, id)
	var i AppSession
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreatedAt,
		&i.ExpiresAt,
		&i.RevokedAt,
		&i.UserAgent,
		&i.Ip,
	)
	return i, err
}
