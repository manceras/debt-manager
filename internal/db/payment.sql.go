// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: payment.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPayment = `-- name: CreatePayment :one
INSERT INTO public.payments (payer_user_id, amount, photo_url, list_id, title)
VALUES ($1, $2, $3, $4, $5) RETURNING id, amount, created_at, photo_url, payer_user_id, list_id, title
`

type CreatePaymentParams struct {
	PayerUserID pgtype.UUID
	Amount      pgtype.Numeric
	PhotoUrl    pgtype.Text
	ListID      pgtype.UUID
	Title       pgtype.Text
}

func (q *Queries) CreatePayment(ctx context.Context, arg CreatePaymentParams) (Payment, error) {
	row := q.db.QueryRow(ctx, createPayment,
		arg.PayerUserID,
		arg.Amount,
		arg.PhotoUrl,
		arg.ListID,
		arg.Title,
	)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.Amount,
		&i.CreatedAt,
		&i.PhotoUrl,
		&i.PayerUserID,
		&i.ListID,
		&i.Title,
	)
	return i, err
}

const deletePaymentByID = `-- name: DeletePaymentByID :exec
DELETE FROM public.payments
WHERE id = $1
`

func (q *Queries) DeletePaymentByID(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deletePaymentByID, id)
	return err
}

const getAllPaymentsForList = `-- name: GetAllPaymentsForList :many
SELECT id, amount, created_at, photo_url, payer_user_id, list_id, title FROM public.payments
WHERE list_id = $1
`

func (q *Queries) GetAllPaymentsForList(ctx context.Context, listID pgtype.UUID) ([]Payment, error) {
	rows, err := q.db.Query(ctx, getAllPaymentsForList, listID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Payment
	for rows.Next() {
		var i Payment
		if err := rows.Scan(
			&i.ID,
			&i.Amount,
			&i.CreatedAt,
			&i.PhotoUrl,
			&i.PayerUserID,
			&i.ListID,
			&i.Title,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPaymentByID = `-- name: GetPaymentByID :one
SELECT id, amount, created_at, photo_url, payer_user_id, list_id, title FROM public.payments
WHERE id = $1
`

func (q *Queries) GetPaymentByID(ctx context.Context, id pgtype.UUID) (Payment, error) {
	row := q.db.QueryRow(ctx, getPaymentByID, id)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.Amount,
		&i.CreatedAt,
		&i.PhotoUrl,
		&i.PayerUserID,
		&i.ListID,
		&i.Title,
	)
	return i, err
}
