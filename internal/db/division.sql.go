// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: division.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createDivision = `-- name: CreateDivision :one
INSERT INTO public.divisions (owe_user_id, amount, payment_id)
VALUES ($1, $2, $3) RETURNING id, amount, created_at, owe_user_id, payment_id
`

type CreateDivisionParams struct {
	OweUserID pgtype.UUID
	Amount    pgtype.Numeric
	PaymentID pgtype.UUID
}

func (q *Queries) CreateDivision(ctx context.Context, arg CreateDivisionParams) (Division, error) {
	row := q.db.QueryRow(ctx, createDivision, arg.OweUserID, arg.Amount, arg.PaymentID)
	var i Division
	err := row.Scan(
		&i.ID,
		&i.Amount,
		&i.CreatedAt,
		&i.OweUserID,
		&i.PaymentID,
	)
	return i, err
}

const getDivisionsByPaymentID = `-- name: GetDivisionsByPaymentID :many
SELECT id, amount, created_at, owe_user_id, payment_id FROM public.divisions WHERE payment_id = $1
`

func (q *Queries) GetDivisionsByPaymentID(ctx context.Context, paymentID pgtype.UUID) ([]Division, error) {
	rows, err := q.db.Query(ctx, getDivisionsByPaymentID, paymentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Division
	for rows.Next() {
		var i Division
		if err := rows.Scan(
			&i.ID,
			&i.Amount,
			&i.CreatedAt,
			&i.OweUserID,
			&i.PaymentID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
