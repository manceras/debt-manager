// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: deposit.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createDeposit = `-- name: CreateDeposit :one
INSERT INTO deposits (amount, payer_user_id, payee_user_id, list_id) VALUES ($1, $2, $3, $4) RETURNING id, amount, created_at, payer_user_id, payee_user_id, list_id
`

type CreateDepositParams struct {
	Amount      pgtype.Numeric
	PayerUserID pgtype.UUID
	PayeeUserID pgtype.UUID
	ListID      pgtype.UUID
}

func (q *Queries) CreateDeposit(ctx context.Context, arg CreateDepositParams) (Deposit, error) {
	row := q.db.QueryRow(ctx, createDeposit,
		arg.Amount,
		arg.PayerUserID,
		arg.PayeeUserID,
		arg.ListID,
	)
	var i Deposit
	err := row.Scan(
		&i.ID,
		&i.Amount,
		&i.CreatedAt,
		&i.PayerUserID,
		&i.PayeeUserID,
		&i.ListID,
	)
	return i, err
}

const getAllDepositsForListID = `-- name: GetAllDepositsForListID :many
SELECT id, amount, created_at, payer_user_id, payee_user_id, list_id FROM deposits WHERE list_id = $1
`

func (q *Queries) GetAllDepositsForListID(ctx context.Context, listID pgtype.UUID) ([]Deposit, error) {
	rows, err := q.db.Query(ctx, getAllDepositsForListID, listID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Deposit
	for rows.Next() {
		var i Deposit
		if err := rows.Scan(
			&i.ID,
			&i.Amount,
			&i.CreatedAt,
			&i.PayerUserID,
			&i.PayeeUserID,
			&i.ListID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
