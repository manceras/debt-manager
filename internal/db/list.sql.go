// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: list.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createList = `-- name: CreateList :exec
INSERT INTO lists (id, title, currency) VALUES ($1, $2, $3)
`

type CreateListParams struct {
	ID       pgtype.UUID
	Title    string
	Currency Currency
}

func (q *Queries) CreateList(ctx context.Context, arg CreateListParams) error {
	_, err := q.db.Exec(ctx, createList, arg.ID, arg.Title, arg.Currency)
	return err
}

const createUserListRelation = `-- name: CreateUserListRelation :one
INSERT INTO users_lists (user_id, list_id) VALUES ($1, $2) RETURNING user_id, list_id
`

type CreateUserListRelationParams struct {
	UserID pgtype.UUID
	ListID pgtype.UUID
}

func (q *Queries) CreateUserListRelation(ctx context.Context, arg CreateUserListRelationParams) (UsersList, error) {
	row := q.db.QueryRow(ctx, createUserListRelation, arg.UserID, arg.ListID)
	var i UsersList
	err := row.Scan(&i.UserID, &i.ListID)
	return i, err
}

const deleteList = `-- name: DeleteList :exec
DELETE FROM lists WHERE id = $1
`

func (q *Queries) DeleteList(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteList, id)
	return err
}

const getAllLists = `-- name: GetAllLists :many
SELECT id, currency, title, created_at FROM lists
`

func (q *Queries) GetAllLists(ctx context.Context) ([]List, error) {
	rows, err := q.db.Query(ctx, getAllLists)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []List
	for rows.Next() {
		var i List
		if err := rows.Scan(
			&i.ID,
			&i.Currency,
			&i.Title,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getListByID = `-- name: GetListByID :one
SELECT id, currency, title, created_at FROM lists WHERE id = $1
`

func (q *Queries) GetListByID(ctx context.Context, id pgtype.UUID) (List, error) {
	row := q.db.QueryRow(ctx, getListByID, id)
	var i List
	err := row.Scan(
		&i.ID,
		&i.Currency,
		&i.Title,
		&i.CreatedAt,
	)
	return i, err
}

const getUsersInList = `-- name: GetUsersInList :many
SELECT id, username, email FROM users
JOIN users_lists ON user_id = id
WHERE list_id = $1 AND id <> app.current_user_id()
`

type GetUsersInListRow struct {
	ID       pgtype.UUID
	Username string
	Email    string
}

func (q *Queries) GetUsersInList(ctx context.Context, listID pgtype.UUID) ([]GetUsersInListRow, error) {
	rows, err := q.db.Query(ctx, getUsersInList, listID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUsersInListRow
	for rows.Next() {
		var i GetUsersInListRow
		if err := rows.Scan(&i.ID, &i.Username, &i.Email); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateList = `-- name: UpdateList :exec
UPDATE lists SET title = $2, currency = $3 WHERE id = $1
`

type UpdateListParams struct {
	ID       pgtype.UUID
	Title    string
	Currency Currency
}

func (q *Queries) UpdateList(ctx context.Context, arg UpdateListParams) error {
	_, err := q.db.Exec(ctx, updateList, arg.ID, arg.Title, arg.Currency)
	return err
}
