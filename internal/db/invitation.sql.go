// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: invitation.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createInvitation = `-- name: CreateInvitation :one
INSERT INTO public.invitations (invited_to_list_id, expires_at, created_by, hash)
VALUES ($1, $2, $3, $4) RETURNING id, hash, invited_to_list_id, expires_at, revoked_at, created_at, created_by, used_by, used_at
`

type CreateInvitationParams struct {
	InvitedToListID pgtype.UUID
	ExpiresAt       pgtype.Timestamptz
	CreatedBy       pgtype.UUID
	Hash            string
}

func (q *Queries) CreateInvitation(ctx context.Context, arg CreateInvitationParams) (Invitation, error) {
	row := q.db.QueryRow(ctx, createInvitation,
		arg.InvitedToListID,
		arg.ExpiresAt,
		arg.CreatedBy,
		arg.Hash,
	)
	var i Invitation
	err := row.Scan(
		&i.ID,
		&i.Hash,
		&i.InvitedToListID,
		&i.ExpiresAt,
		&i.RevokedAt,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UsedBy,
		&i.UsedAt,
	)
	return i, err
}

const getAllInvitationsForList = `-- name: GetAllInvitationsForList :many
SELECT id, hash, invited_to_list_id, expires_at, revoked_at, created_at, created_by, used_by, used_at FROM public.invitations
WHERE invited_to_list_id = $1
`

func (q *Queries) GetAllInvitationsForList(ctx context.Context, invitedToListID pgtype.UUID) ([]Invitation, error) {
	rows, err := q.db.Query(ctx, getAllInvitationsForList, invitedToListID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Invitation
	for rows.Next() {
		var i Invitation
		if err := rows.Scan(
			&i.ID,
			&i.Hash,
			&i.InvitedToListID,
			&i.ExpiresAt,
			&i.RevokedAt,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UsedBy,
			&i.UsedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getInvitationByHash = `-- name: GetInvitationByHash :one
SELECT id, hash, invited_to_list_id, expires_at, revoked_at, created_at, created_by, used_by, used_at FROM public.invitations
WHERE hash = $1
`

func (q *Queries) GetInvitationByHash(ctx context.Context, hash string) (Invitation, error) {
	row := q.db.QueryRow(ctx, getInvitationByHash, hash)
	var i Invitation
	err := row.Scan(
		&i.ID,
		&i.Hash,
		&i.InvitedToListID,
		&i.ExpiresAt,
		&i.RevokedAt,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UsedBy,
		&i.UsedAt,
	)
	return i, err
}

const getInvitationByID = `-- name: GetInvitationByID :one
SELECT id, hash, invited_to_list_id, expires_at, revoked_at, created_at, created_by, used_by, used_at FROM public.invitations
WHERE id = $1
`

func (q *Queries) GetInvitationByID(ctx context.Context, id pgtype.UUID) (Invitation, error) {
	row := q.db.QueryRow(ctx, getInvitationByID, id)
	var i Invitation
	err := row.Scan(
		&i.ID,
		&i.Hash,
		&i.InvitedToListID,
		&i.ExpiresAt,
		&i.RevokedAt,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UsedBy,
		&i.UsedAt,
	)
	return i, err
}

const revokeInvitationByID = `-- name: RevokeInvitationByID :exec
UPDATE public.invitations
SET revoked_at = now()
WHERE id = $1
`

func (q *Queries) RevokeInvitationByID(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, revokeInvitationByID, id)
	return err
}
